// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createProd = `-- name: CreateProd :exec
INSERT INTO producto (nombre_producto, descripcion, precio, categoria) VALUES ($1,$2, $3, $4)
`

type CreateProdParams struct {
	NombreProducto string         `json:"nombre_producto"`
	Descripcion    sql.NullString `json:"descripcion"`
	Precio         string         `json:"precio"`
	Categoria      sql.NullString `json:"categoria"`
}

func (q *Queries) CreateProd(ctx context.Context, arg CreateProdParams) error {
	_, err := q.db.ExecContext(ctx, createProd,
		arg.NombreProducto,
		arg.Descripcion,
		arg.Precio,
		arg.Categoria,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO usuario (nombre_usuario, email) VALUES ($1, $2) RETURNING id_usuario, nombre_usuario, email
`

type CreateUserParams struct {
	NombreUsuario string `json:"nombre_usuario"`
	Email         string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.NombreUsuario, arg.Email)
	var i Usuario
	err := row.Scan(&i.IDUsuario, &i.NombreUsuario, &i.Email)
	return i, err
}

const createVenta = `-- name: CreateVenta :exec
INSERT INTO venta (id_producto, id_venta, cantidad, total, fecha) VALUES ($1,$2, $3, $4, $5)
`

type CreateVentaParams struct {
	IDProducto int32        `json:"id_producto"`
	IDVenta    int32        `json:"id_venta"`
	Cantidad   int32        `json:"cantidad"`
	Total      string       `json:"total"`
	Fecha      sql.NullTime `json:"fecha"`
}

func (q *Queries) CreateVenta(ctx context.Context, arg CreateVentaParams) error {
	_, err := q.db.ExecContext(ctx, createVenta,
		arg.IDProducto,
		arg.IDVenta,
		arg.Cantidad,
		arg.Total,
		arg.Fecha,
	)
	return err
}

const deleteProd = `-- name: DeleteProd :exec
DELETE FROM producto WHERE id_producto = $1
`

func (q *Queries) DeleteProd(ctx context.Context, idProducto int32) error {
	_, err := q.db.ExecContext(ctx, deleteProd, idProducto)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM usuario WHERE id_usuario = $1
`

func (q *Queries) DeleteUser(ctx context.Context, idUsuario int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, idUsuario)
	return err
}

const getProd = `-- name: GetProd :one
SELECT nombre_producto, descripcion, precio, categoria FROM producto WHERE id_producto = $1
`

type GetProdRow struct {
	NombreProducto string         `json:"nombre_producto"`
	Descripcion    sql.NullString `json:"descripcion"`
	Precio         string         `json:"precio"`
	Categoria      sql.NullString `json:"categoria"`
}

func (q *Queries) GetProd(ctx context.Context, idProducto int32) (GetProdRow, error) {
	row := q.db.QueryRowContext(ctx, getProd, idProducto)
	var i GetProdRow
	err := row.Scan(
		&i.NombreProducto,
		&i.Descripcion,
		&i.Precio,
		&i.Categoria,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT nombre_usuario, email FROM usuario WHERE id_usuario = $1
`

type GetUserRow struct {
	NombreUsuario string `json:"nombre_usuario"`
	Email         string `json:"email"`
}

func (q *Queries) GetUser(ctx context.Context, idUsuario int32) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, idUsuario)
	var i GetUserRow
	err := row.Scan(&i.NombreUsuario, &i.Email)
	return i, err
}

const getVenta = `-- name: GetVenta :one
SELECT id_venta, id_producto, id_usuario, cantidad, total, fecha FROM venta WHERE id_venta = $1
`

func (q *Queries) GetVenta(ctx context.Context, idVenta int32) (Ventum, error) {
	row := q.db.QueryRowContext(ctx, getVenta, idVenta)
	var i Ventum
	err := row.Scan(
		&i.IDVenta,
		&i.IDProducto,
		&i.IDUsuario,
		&i.Cantidad,
		&i.Total,
		&i.Fecha,
	)
	return i, err
}

const getVenta_usuario = `-- name: GetVenta_usuario :one
SELECT id_venta, id_producto, id_usuario, cantidad, total, fecha FROM venta WHERE id_usuario = $1
`

func (q *Queries) GetVenta_usuario(ctx context.Context, idUsuario int32) (Ventum, error) {
	row := q.db.QueryRowContext(ctx, getVenta_usuario, idUsuario)
	var i Ventum
	err := row.Scan(
		&i.IDVenta,
		&i.IDProducto,
		&i.IDUsuario,
		&i.Cantidad,
		&i.Total,
		&i.Fecha,
	)
	return i, err
}

const listProd = `-- name: ListProd :many
SELECT id_producto, nombre_producto, descripcion, precio, stock, categoria FROM producto ORDER BY nombre_producto
`

func (q *Queries) ListProd(ctx context.Context) ([]Producto, error) {
	rows, err := q.db.QueryContext(ctx, listProd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Producto
	for rows.Next() {
		var i Producto
		if err := rows.Scan(
			&i.IDProducto,
			&i.NombreProducto,
			&i.Descripcion,
			&i.Precio,
			&i.Stock,
			&i.Categoria,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id_usuario, nombre_usuario, email FROM usuario ORDER BY nombre_usuario
`

func (q *Queries) ListUsers(ctx context.Context) ([]Usuario, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usuario
	for rows.Next() {
		var i Usuario
		if err := rows.Scan(&i.IDUsuario, &i.NombreUsuario, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVentas = `-- name: ListVentas :many
SELECT id_venta, id_producto, id_usuario, cantidad, total, fecha FROM venta WHERE id_usuario = $1
`

func (q *Queries) ListVentas(ctx context.Context, idUsuario int32) ([]Ventum, error) {
	rows, err := q.db.QueryContext(ctx, listVentas, idUsuario)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ventum
	for rows.Next() {
		var i Ventum
		if err := rows.Scan(
			&i.IDVenta,
			&i.IDProducto,
			&i.IDUsuario,
			&i.Cantidad,
			&i.Total,
			&i.Fecha,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductoPrecio = `-- name: UpdateProductoPrecio :exec
UPDATE producto SET precio = $2 WHERE id_producto = $1
`

type UpdateProductoPrecioParams struct {
	IDProducto int32  `json:"id_producto"`
	Precio     string `json:"precio"`
}

func (q *Queries) UpdateProductoPrecio(ctx context.Context, arg UpdateProductoPrecioParams) error {
	_, err := q.db.ExecContext(ctx, updateProductoPrecio, arg.IDProducto, arg.Precio)
	return err
}

const updateProductoStock = `-- name: UpdateProductoStock :exec
UPDATE producto SET stock = $2 WHERE id_producto = $1
`

type UpdateProductoStockParams struct {
	IDProducto int32 `json:"id_producto"`
	Stock      int32 `json:"stock"`
}

func (q *Queries) UpdateProductoStock(ctx context.Context, arg UpdateProductoStockParams) error {
	_, err := q.db.ExecContext(ctx, updateProductoStock, arg.IDProducto, arg.Stock)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE usuario SET nombre_usuario = $2, email = $3 WHERE id_usuario = $1
`

type UpdateUserParams struct {
	IDUsuario     int32  `json:"id_usuario"`
	NombreUsuario string `json:"nombre_usuario"`
	Email         string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.IDUsuario, arg.NombreUsuario, arg.Email)
	return err
}
